using EventCalendarApp.Exceptions;
using EventCalendarApp.Interfaces;
using EventCalendarApp.Models;

namespace EventCalendarApp.Services
{
    public class EventService : IEventService
    {
        private readonly IRepository<int, Event> _eventRepository;
        private readonly INotificationRepository<int, Reminder> _reminderRepository;
        private readonly INotificationRepository<int, Notification> _notificationRepository;
        public EventService(IRepository<int, Event> eventRepository, INotificationRepository<int, Reminder> reminderRepository, INotificationRepository<int, Notification> notificationRepository)
        {
            _eventRepository = eventRepository;
            _reminderRepository = reminderRepository;
            _notificationRepository = notificationRepository;
        }
        /// <summary>
        /// create an event in a database
        /// </summary>
        /// <param name="events">event is added with an autogenerated reminder and notification</param>
        /// <returns>added events</returns>
        public Event Create(Event events)
        {
            //var currentUser = _currentUserService.GetCurrentUserInfo();
            // events.UserEmail = user.Email; // Associate the event with the user
            var addedEvent = _eventRepository.Add(events);
            // Add reminder
            var reminder = new Reminder
            {
                Message = "Your event is coming up!",
                ReminderDateTime = events.StartTime,
                EventId = addedEvent.Id,
                //UserEmail = user.Email
            };
            _reminderRepository.Add(reminder);
            // Add notification
            var notification = new Notification
            {
                Content = "Event Notification",
                NotificationDateTime = SetNotificationTimeLogic(events.StartTime), // Set your notification time logic
                EventId = addedEvent.Id,
                // ReminderId=reminder.Id
                //UserEmail = user.Email
            };
            _notificationRepository.Add(notification);

            return addedEvent;
        }
        private static DateTime SetNotificationTimeLogic(DateTime eventsStartDateTime) => eventsStartDateTime.AddMinutes(-30);
        /// <summary>
        /// List of all the events
        /// </summary>
        /// <returns>all events</returns>
        /// <exception cref="NoEventsAvailableException">No events are available</exception>
        public List<Event> GetEvents()
        {
            var events = _eventRepository.GetAll();
            if (events != null)
            {
                return events.ToList();
            }
            throw new NoEventsAvailableException();
        }
        /// <summary>
        /// Remove event from the database
        /// </summary>
        /// <param name="events">by id event to be deleted</param>
        /// <returns>deleted event</returns>
        public Event Remove(Event events)
        {
            var EventId = _eventRepository.GetAll().FirstOrDefault(e => e.Id == events.Id);
            if (EventId != null)
            {
                var result = _eventRepository.Delete(events.Id);
                if (result != null) return result; 
            }
            return events; 
        }

        public Event Update(Event events)
        {
            var EventId = _eventRepository.GetAll().FirstOrDefault(e => e.Id == events.Id);
            if (EventId != null)
            {
                var result = _eventRepository.Update(events);
                if (result != null) return result;
            }
            return events;
        }
        //public Event Add(Event events)
        //{
        //    if (IsCategoryIdUnique(events.Id))
        //    {
        //        return _eventRepository.Add(events);
        //    }
        //    throw new IdAlreadyExist(); 
        //}
        //private bool IsCategoryIdUnique(int eventId)
        //{

        //    return !_eventRepository.GetAll().Any(e => e.Id == eventId);

        //}
    }
}